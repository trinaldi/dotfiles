riml_include 'ctags_builder'
riml_include 'tags_option'
riml_include 'wordpress_project_command'

class ConfigureTagsCommand < WordPressProjectCommand
  def initialize(container)
    super(container)
    self.is_configure_tags_command = true
  end

  defm get_name
    return 'Wctags'
  end

  defm has_ex_mode
    return true
  end

  defm run(opts)
    buffer  = self.current_buffer()
    project = self.current_project()

    if has_key(opts, 'bang') && opts.bang
      self.regenerate_ctags()
    elseif project.has_wordpress_path()
      didGenerate = self.generate_ctags()
      if didGenerate
        echo_msg('WordPress: Generating ctags ... DONE')
      end
    end

    self.configure_tag_option()
  end

  defm generate_ctags(msg = 'Generating')
    ctags_builder = self.lookup('ctags_builder')
    if ctags_builder.get_project_path() == ''
      echo_error('Could not generate tags, WordPress not detected, Please set g:wordpress_vim_wordpress_path in your vimrc')
      return false
    end

    if self.needs_tags_generation()
      echo_msg("WordPress: #{msg} ctags ...")
      ctags_builder.generate()
      return true
    end

    return false
  end

  defm regenerate_ctags
    ctags_builder = self.lookup('ctags_builder')
    unless ctags_builder.has_executable()
      echo_error("Exuberant Ctags was not found.")
      return
    end

    tags_path     = ctags_builder.get_project_tags()

    if filereadable(tags_path)
      delete(tags_path)
    end

    didGenerate = self.generate_ctags('Regenerating')
    if didGenerate
      echo_msg('WordPress: Regenerating ctags DONE')
    end
  end

  defm needs_tags_generation
    ctags_builder = self.lookup('ctags_builder')
    return !ctags_builder.has_tags() && ctags_builder.has_executable()
  end

  defm configure_tag_option
    ctags_builder = self.lookup('ctags_builder')
    tags_option   = self.lookup('tags_option')

    if ctags_builder.has_tags()
      tags_path = fnamemodify(ctags_builder.get_project_tags(), ':p')
      unless tags_option.get_tags() =~ tags_path
        tags_option.prepend(tags_path)
      end
    end
  end
end
