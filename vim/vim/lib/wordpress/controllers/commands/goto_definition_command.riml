riml_include 'wordpress_project_command'
riml_include 'tag_list_matcher'
riml_include 'msg'

class GotoDefinitionCommand < WordPressProjectCommand
  def initialize(container)
    super(container)
  end

  defm get_name
    return 'Wdef'
  end

  defm has_ex_mode
    return true
  end

  defm get_auto_register
    return false
  end

  defm get_range
    return true
  end

  defm run(*args)
    [params, opts] = self.expand_args(args)
    current_word   = self.get_current_word(params, opts)
    current_line   = self.get_current_line()
    hook_matcher   = self.lookup('hook_matcher')
    hook_match     = hook_matcher.match(current_line, current_word)

    if hook_match.is_match()
      return self.jump_to_hook(hook_match)
    end

    tag_list_matcher = self.lookup('tag_list_matcher')
    found            = tag_list_matcher.match(current_word)

    if found.is_match()
      position = found.get_position()
      cmd      = self.get_jump_cmd(current_word, position)
      success  = self.jump_to(cmd)
    else
      success = false
    end

    unless success
      display_word = self.to_display_word(current_word)
      echo_error("No match for: #{display_word}")
    end
  end

  " sometimes taglist returns matches to a tag it can't find
  " this exception guards against that
  defm jump_to(cmd)
    try
      execute(cmd)
      return true
    catch
      return false
    end
  end

  defm jump_to_hook(hook_match)
    cmd = self.to_hook_command(hook_match.get_kind())

    if has_key(cmd, 'name')
      opts = { 'bang': cmd.bang, 'is_option': true }
      self.process(cmd.name, hook_match.get_keyword(), opts)
    end
  end

  " by flipping 'bang' we toggle between
  " the invocation and listener modes
  defm to_hook_command(kind)
    if kind == 'action'
      cmd = { 'name': 'Waction', 'bang': false }
    elseif kind == 'alistener'
      cmd = { 'name': 'Waction', 'bang': true }
    elseif kind == 'filter'
      cmd = { 'name': 'Wfilter', 'bang': false }
    elseif kind == 'flistener'
      cmd = { 'name': 'Wfilter', 'bang': true }
    else
      cmd = {}
    end

    return cmd
  end

  defm get_jump_cmd(keyword, position)
    if position != 0
      " since tags are 1 based
      position = position + 1
      return ":#{position}tag #{keyword}"
    else
      return ":tag #{keyword}"
    end
  end

  defm to_display_word(word)
    builder = self.lookup('ctags_command_builder')
    display_word = word
    display_word = self.strip_prefix(display_word, builder.get_action_uid())
    display_word = self.strip_prefix(display_word, builder.get_action_listener_uid())
    display_word = self.strip_prefix(display_word, builder.get_filter_uid())
    display_word = self.strip_prefix(display_word, builder.get_filter_listener_uid())

    return display_word
  end

  defm strip_prefix(word, prefix)
    return substitute(word, "^#{prefix}_", '', '')
  end
end
