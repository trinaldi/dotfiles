riml_include 'spec_helper'
riml_include 'container'
riml_include 'command_registry'
riml_include 'buffer'
riml_include 'project'
riml_include 'buffer_collection'
riml_include 'project_collection'
riml_include 'wordpress_command'
riml_include 'configure_tags_command'
riml_include 'with_dir'
riml_include 'tags_option'

class ConfigureTagsCommandSpec
  defm before_each
    self.container = new Container({})
    self.container.register('project', 'Project', false)
    self.container.register('buffer_collection', 'BufferCollection', true)
    self.container.register('project_collection', 'ProjectCollection', true)
    self.container.register('with_dir', 'WithDir', false)
    self.container.register('tags_option', 'TagsOption', true)
    self.command = new ConfigureTagsCommand(self.container)

    self.project_collection = self.container.lookup('project_collection')
    self.buffer_collection = self.container.lookup('buffer_collection')

    self.buffer = new Buffer("#{g:WORDPRESS_DIR}/wp-load.php")
    self.buffer_collection.set_current(self.buffer)
    self.project_collection.add(self.buffer.get_project_path())
    self.project = self.command.current_project()
  end

  defm lookup(key)
    return self.project.lookup(key)
  end

  defm it_builds_ctags_if_not_found
    ctags_builder = self.project.lookup('ctags_builder')
    ctags_builder.clean()

    self.command.run({})
    expect(ctags_builder.has_tags()).to_be_true()
  end

  defm it_does_not_build_ctags_if_present
    ctags_builder = self.project.lookup('ctags_builder')
    system("touch #{ctags_builder.get_project_tags()}")

    self.command.run({})
    expect(ctags_builder.has_tags()).to_be_true()
  end

  defm it_configures_tags_option
    self.command.run({})
    expect(&tags).to_match(g:WORDPRESS_DIR)
  end

  defm it_can_regenerate_ctags
    ctags_builder = self.lookup('ctags_builder')
    self.command.run({ 'bang': true })
    expect(ctags_builder.has_tags()).to_be_true()
  end

  defm it_does_not_reapply_tags_options_on_regeneration
    tags_option = self.lookup('tags_option')
    self.command.run({})

    tags = tags_option.get_tags()
    self.command.run({ 'bang': true })

    expect(tags_option.get_tags()).to_equal(tags)
  end
end

