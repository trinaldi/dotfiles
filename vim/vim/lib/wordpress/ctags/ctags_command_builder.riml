riml_include 'leet_convertor'
riml_include 'msg'

class CTagsCommandBuilder
  defm needs
    return ['leet_convertor']
  end

  defm build
    cmd   = self.get_executable()
    cmd .= " -R"
    cmd .= " -f #{shellescape(self.get_tags_name())}"
    cmd .= " --tag-relative"

    re   = self.to_invocation_regex('action', 'a', 'do_action')
    cmd .= " --regex-PHP=#{shellescape(re)}"

    re   = self.to_listener_regex('alistener', 'l', 'add_action')
    cmd .= " --regex-PHP=#{shellescape(re)}"

    re   = self.to_invocation_regex('filter', 'r', 'apply_filters')
    cmd .= " --regex-PHP=#{shellescape(re)}"

    re   = self.to_listener_regex('flistener', 'e', 'add_filter')
    cmd .= " --regex-PHP=#{shellescape(re)}"

    " exclude files to fix #16
    dirs = self.get_exclude_dirs();
    for dir in dirs
      cmd .= " --exclude=#{dir}"
    end

    cmd .= " ."

    "echo_msg(cmd)

    return cmd
  end

  defm get_exclude_dirs
    dirs = []
    add(dirs, '.git')
    add(dirs, '.hg')
    add(dirs, 'node_modules')
    add(dirs, 'bower_components')
    add(dirs, 'build')
    add(dirs, 'dist')
    add(dirs, 'vendor')

    return dirs
  end

  defm to_invocation_regex(type_name, type_letter, method)
    pattern = self.to_invocation_pattern(method)
    return self.to_tag_regex(type_name, type_letter, method, pattern)
  end

  defm to_listener_regex(type_name, type_letter, method)
    pattern = self.to_listener_pattern(method)
    return self.to_tag_regex(type_name, type_letter, method, pattern)
  end

  defm to_tag_regex(type_name, type_letter, method, pattern)
    re  = "/"
    re .= "#{pattern}"
    re .= "/"
    re .= self.to_capture_group(type_name)
    re .= "/"
    re .= self.to_kind(type_name, type_letter)
    re .= "/"

    return re
  end

  defm to_kind(letter, label)
    return "#{label},#{letter}"
  end

  defm to_capture_group(type_name, group_num = 1)
    uid = self.to_leet(type_name)
    return "#{uid}_\\#{group_num}"
  end

  defm to_invocation_pattern(method)
    pattern  = method
    pattern .= "[a-z_]*\\(\\s*['\"]([a-z_]+)['\"]\\s*.*\)"
    return pattern
  end

  defm to_listener_pattern(method)
    pattern = method
    pattern .= "\\s*\\(\\s*['\"]([a-z_]+)['\"]\\s*.*\)"
    return pattern
  end

  defm get_tags_name
    if exists('g:wordpress_vim_tags_file_name')
      return g:wordpress_vim_tags_file_name
    else
      return "tags"
    end
  end

  defm get_executable
    if exists('g:wordpress_vim_ctags_path')
      ctags = g:wordpress_vim_ctags_path
    else
      ctags = 'ctags'
    end

    return ctags
  end

  defm has_executable
    return executable(self.get_executable()) && self.has_exuberant_executable()
  end

  defm has_exuberant_executable
    if has_key(self, 'exuberant_found')
      return self.exuberant_found
    end

    ctags_version = system(self.get_executable() . ' --version')

    if ctags_version =~ 'Exuberant Ctags'
      self.exuberant_found = true
    else
      self.exuberant_found = false
    end

    return self.exuberant_found
  end

  defm to_leet(key)
    variable = "#{key}_uid"
    unless has_key(self, variable)
      self[variable] = self.leet_convertor.convert(key)
    end

    return self[variable]
  end

  defm get_action_uid
    return self.to_leet('action')
  end

  defm get_action_listener_uid
    return self.to_leet('alistener')
  end

  defm get_filter_uid
    return self.to_leet('filter')
  end

  defm get_filter_listener_uid
    return self.to_leet('flistener')
  end
end
