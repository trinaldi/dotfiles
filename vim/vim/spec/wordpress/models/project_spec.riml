riml_include 'spec_helper'
riml_include 'container'
riml_include 'project'
riml_include 'command_registry'
riml_include 'wpcli_command_factory'
riml_include 'with_dir'

class ProjectSpec
  defm before_each
    self.container = new Container({})
    self.container.register('project', 'Project', true)
    self.container.register('with_dir', 'WithDir', false)
    self.project_path = 'spec/wordpress/projects/wordpress_with_core'
    self.project = self.container.lookup('project')
    self.cli = self.project.lookup('wpcli')
    self.cli_path = self.project.lookup('wpcli_path')
  end

  defm lookup(key)
    return self.container.lookup('project')
  end

  defm it_has_a_container
    project = self.lookup('project')
    expect(project.container.is_container).to_be_true()
  end

  defm it_has_a_command_registry
    expect(self.project.lookup('project_registry').is_command_registry).to_be_true()
  end

  defm it_stores_project_root
    self.cli_path.mock_is_executable = false
    self.project.load(self.project_path)
    expect(self.project.get_root()).to_match("#{self.project_path}$")
  end

  defm it_configures_wp_cli_with_vendor_path
    path = expand('~/.composer')
    self.project.load_wpcli(path)

    expect(self.cli.get_path()).to_match('vendor/bin/wp$')
    expect(self.project.has_cli()).to_be_true()
  end

  defm it_knows_if_wp_cli_is_missing
    self.cli_path.mock_is_executable = false
    result = self.project.load('spec')

    expect(result).to_be_false()
    expect(self.project.has_cli()).to_be_false()
  end

  defm it_uses_global_wp_when_available
    result = self.project.load(self.project_path)

    expect(result).to_be_true()
    expect(self.project.has_cli()).to_be_true()
  end

  defm it_can_load_list_of_available_wp_cli_commands
    self.project.load(self.project_path)
    commands = self.project.get_commands()
    expect(len(commands)).to_be_gt(10)
  end

  defm it_does_not_load_commands_if_cli_does_not_exist
    self.cli_path.mock_is_executable = false
    self.project.load(self.project_path)
    commands = self.project.get_commands()
    expect(len(commands)).to_equal(1)
  end

  defm it_loads_missing_command_if_wp_cli_is_absent
    self.cli_path.mock_is_executable = false
    self.project.load(self.project_path)
    commands = self.project.get_commands()
    expect(commands[0]).to_equal('missing')
  end

  defm it_has_correct_wordpress_path_in_core_project
    self.project.load(g:WORDPRESS_DIR)
    expect(self.project.get_wordpress_path()).to_match("#{g:WORDPRESS_DIR}$")
  end

  defm it_has_correct_wordpress_path_in_wpcli_project
    self.project.load('tmp/wpcli_with_local')
    expect(self.project.get_wordpress_path()).to_match("#{g:WORDPRESS_DIR}$")
  end

  defm it_has_correct_wordpress_path_in_plugin_project_with_global_wp_path
    g:wordpress_vim_wordpress_path = expand("./#{g:WORDPRESS_DIR}")
    self.project.load('spec/wordpress/project/sample-wordpress-plugin')
    expect(self.project.get_wordpress_path()).to_match("#{g:WORDPRESS_DIR}$")
    :unlet g:wordpress_vim_wordpress_path
  end

  defm it_configures_ctags_builder_for_valid_wordpress_path
    ctags_builder = self.project.lookup('ctags_builder')
    self.project.wordpress_project_path = g:WORDPRESS_DIR
    self.project.load_ctags_builder('foo')
    expect(ctags_builder.get_project_path()).to_equal(g:WORDPRESS_DIR)
  end

  defm it_does_not_configure_ctags_builder_for_valid_wordpress_path
    ctags_builder = self.project.lookup('ctags_builder')
    self.project.load_ctags_builder('foo')
    expect(ctags_builder.get_project_path()).to_equal('')
  end
end
