{"name":"wp","description":"Manage WordPress through the command-line.","longdesc":"## GLOBAL PARAMETERS\n\n  --path=<path>\n      Path to the WordPress files\n\n  --url=<url>\n      Pretend request came from given URL\n\n  --user=<id|login|email>\n      Set the WordPress user\n\n  --skip-plugins[=<plugin>]\n      Skip loading all or some plugins\n\n  --require=<path>\n      Load PHP file before running the command (may be used more than once)\n\n  --[no-]color\n      Whether to colorize the output\n\n  --debug\n      Show all PHP errors\n\n  --prompt\n      Prompt the user to enter values for all command arguments\n\n  --quiet\n      Suppress informational messages\n\nRun 'wp help <command>' to get more information on a specific command.\n","subcommands":[{"name":"cache","description":"Manage the object cache.","longdesc":"## EXAMPLES\n\n    wp cache set my_key my_value my_group 300\n\n    wp cache get my_key my_group","subcommands":[{"name":"add","description":"Add a value to the object cache.","longdesc":"","synopsis":"<key> <value> [<group>] [<expiration>]"},{"name":"decr","description":"Decrement a value in the object cache.","longdesc":"","synopsis":"<key> [<offset>] [<group>]"},{"name":"delete","description":"Remove a value from the object cache.","longdesc":"","synopsis":"<key> [<group>]"},{"name":"flush","description":"Flush the object cache.","longdesc":"","synopsis":""},{"name":"get","description":"Get a value from the object cache.","longdesc":"","synopsis":"<key> [<group>]"},{"name":"incr","description":"Increment a value in the object cache.","longdesc":"","synopsis":"<key> [<offset>] [<group>]"},{"name":"replace","description":"Replace an existing value in the object cache.","longdesc":"","synopsis":"<key> <value> [<group>] [<expiration>]"},{"name":"set","description":"Set a value to the object cache.","longdesc":"","synopsis":"<key> <value> [<group>] [<expiration>]"},{"name":"type","description":"Attempts to determine which object cache is being used.","longdesc":"Note that the guesses made by this function are based on the WP_Object_Cache classes\nthat define the 3rd party object cache extension. Changes to those classes could render\nproblems with this function's ability to determine which object cache is being used.","synopsis":""}]},{"name":"cap","description":"Manage user capabilities.","longdesc":"## EXAMPLES\n\n    # Add 'spectate' capability to 'author' role\n    wp cap add 'author' 'spectate'\n\n    # Add all caps from 'editor' role to 'author' role\n    wp cap list 'editor' | xargs wp cap add 'author'\n\n    # Remove all caps from 'editor' role that also appear in 'author' role\n    wp cap list 'author' | xargs wp cap remove 'editor'","subcommands":[{"name":"add","description":"Add capabilities to a given role.","longdesc":"","synopsis":"<role> <cap>..."},{"name":"list","description":"List capabilities for a given role.","longdesc":"## EXAMPLES\n\n    # Display alphabetical list of bbPress moderator capabilities\n    wp cap list 'bbp_moderator' | sort","synopsis":"<role>"},{"name":"remove","description":"Remove capabilities from a given role.","longdesc":"","synopsis":"<role> <cap>..."}]},{"name":"cli","description":"Get information about WP-CLI itself.","longdesc":"","subcommands":[{"name":"cmd-dump","description":"Dump the list of installed commands, as JSON.","longdesc":"","synopsis":""},{"name":"completions","description":"Generate tab completion strings.","longdesc":"## OPTIONS\n\n--line=<line>\n: The current command line to be executed\n\n--point=<point>\n: The index to the current cursor position relative to the beginning of the command","synopsis":"--line=<line> --point=<point>"},{"name":"info","description":"Print various data about the CLI environment.","longdesc":"## OPTIONS\n\n[--format=<format>]\n: Accepted values: json","synopsis":"[--format=<format>]"},{"name":"param-dump","description":"Dump the list of global parameters, as JSON.","longdesc":"","synopsis":""},{"name":"version","description":"Print WP-CLI version.","longdesc":"","synopsis":""}]},{"name":"comment","description":"Manage comments.","longdesc":"## EXAMPLES\n\n    # delete all spam comments.\n    wp comment delete $(wp comment list --status=spam --format=ids)","subcommands":[{"name":"approve","description":"Approve a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to approve.\n\n## EXAMPLES\n\n    wp comment approve 1337","synopsis":"<id>"},{"name":"count","description":"Count comments, on whole blog or on a given post.","longdesc":"## OPTIONS\n\n[<post-id>]\n: The ID of the post to count comments in.\n\n## EXAMPLES\n\n    wp comment count\n    wp comment count 42","synopsis":"[<post-id>]"},{"name":"create","description":"Insert a comment.","longdesc":"## OPTIONS\n\n--<field>=<value>\n: Associative args for the new comment. See wp_insert_comment().\n\n[--porcelain]\n: Output just the new comment id.\n\n## EXAMPLES\n\n    wp comment create --comment_post_ID=15 --comment_content=\"hello blog\" --comment_author=\"wp-cli\"","synopsis":"--<field>=<value> [--porcelain]"},{"name":"delete","description":"Delete a comment.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of comments to delete.\n\n[--force]\n: Skip the trash bin.\n\n## EXAMPLES\n\n    wp comment delete 1337 --force\n\n    wp comment delete 1337 2341 --force","synopsis":"<id>... [--force]"},{"name":"exists","description":"Verify whether a comment exists.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to check.\n\n## EXAMPLES\n\n    wp comment exists 1337","synopsis":"<id>"},{"name":"get","description":"Get a single comment.","longdesc":"## OPTIONS\n\n<id>\n: The comment to get.\n\n[--field=<field>]\n: Instead of returning the whole comment, returns the value of a single field.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    wp comment get 1 --field=content","synopsis":"<id> [--field=<field>] [--format=<format>]"},{"name":"list","description":"Get a list of comments.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: One or more args to pass to WP_Comment_Query.\n\n[--field=<field>]\n: Prints the value of a single field for each comment.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to comment_ID,comment_post_ID,comment_date,comment_approved,comment_author,comment_author_email\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp comment list --field=ID\n\n    wp comment list --post_id=2\n\n    wp comment list --number=20 --status=approve","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"meta","description":"Manage comment custom fields.","longdesc":"## OPTIONS\n\n--format=json\n: Encode\/decode values as JSON.\n\n## EXAMPLES\n\n    wp comment meta set 123 description \"Mary is a WordPress developer.\"","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"","synopsis":"<id> <key>"},{"name":"get","description":"Get meta field value.","longdesc":"","synopsis":"<id> <key> [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.","synopsis":"<id> <key> [<value>] [--format=<format>]"}]},{"name":"spam","description":"Spam a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to mark as spam.\n\n## EXAMPLES\n\n    wp comment spam 1337","synopsis":"<id>"},{"name":"status","description":"Get status of a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to check.\n\n## EXAMPLES\n\n    wp comment status 1337","synopsis":"<id>"},{"name":"trash","description":"Trash a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to trash.\n\n## EXAMPLES\n\n    wp comment trash 1337","synopsis":"<id>"},{"name":"unapprove","description":"Unapprove a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to unapprove.\n\n## EXAMPLES\n\n    wp comment unapprove 1337","synopsis":"<id>"},{"name":"unspam","description":"Unspam a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to unmark as spam.\n\n## EXAMPLES\n\n    wp comment unspam 1337","synopsis":"<id>"},{"name":"untrash","description":"Untrash a comment.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the comment to untrash.\n\n## EXAMPLES\n\n    wp comment untrash 1337","synopsis":"<id>"},{"name":"update","description":"Update one or more comments.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of comments to update.\n\n--<field>=<value>\n: One or more fields to update. See wp_update_comment().\n\n## EXAMPLES\n\n    wp comment update 123 --comment_author='That Guy'","synopsis":"<id>... --<field>=<value>"},{"name":"url","description":"Get comment url","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of comments to get the URL.\n\n## EXAMPLES\n\n    wp comment url 123","synopsis":"<id>..."}]},{"name":"core","description":"Download, install, update and otherwise manage WordPress proper.","longdesc":"","subcommands":[{"name":"config","description":"Generate a wp-config.php file.","longdesc":"## OPTIONS\n\n--dbname=<dbname>\n: Set the database name.\n\n--dbuser=<dbuser>\n: Set the database user.\n\n[--dbpass=<dbpass>]\n: Set the database user password.\n\n[--dbhost=<dbhost>]\n: Set the database host. Default: 'localhost'\n\n[--dbprefix=<dbprefix>]\n: Set the database table prefix. Default: 'wp_'\n\n[--dbcharset=<dbcharset>]\n: Set the database charset. Default: 'utf8'\n\n[--dbcollate=<dbcollate>]\n: Set the database collation. Default: ''\n\n[--locale=<locale>]\n: Set the WPLANG constant. Defaults to $wp_local_package variable.\n\n[--extra-php]\n: If set, the command reads additional PHP code from STDIN.\n\n[--skip-salts]\n: If set, keys and salts won't be generated, but should instead be passed via `--extra-php`.\n\n[--skip-check]\n: If set, the database connection is not checked.\n\n## EXAMPLES\n\n    # Standard wp-config.php file\n    wp core config --dbname=testing --dbuser=wp --dbpass=securepswd --locale=ro_RO\n\n    # Enable WP_DEBUG and WP_DEBUG_LOG\n    wp core config --dbname=testing --dbuser=wp --dbpass=securepswd --extra-php <<PHP\n    define( 'WP_DEBUG', true );\n    define( 'WP_DEBUG_LOG', true );\n    PHP","synopsis":"--dbname=<dbname> --dbuser=<dbuser> [--dbpass=<dbpass>] [--dbhost=<dbhost>] [--dbprefix=<dbprefix>] [--dbcharset=<dbcharset>] [--dbcollate=<dbcollate>] [--locale=<locale>] [--extra-php] [--skip-salts] [--skip-check]"},{"name":"download","description":"Download core WordPress files.","longdesc":"## OPTIONS\n\n[--path=<path>]\n: Specify the path in which to install WordPress.\n\n[--locale=<locale>]\n: Select which language you want to download.\n\n[--version=<version>]\n: Select which version you want to download.\n\n[--force]\n: Overwrites existing files, if present.\n\n## EXAMPLES\n\n    wp core download --locale=nl_NL","synopsis":"[--path=<path>] [--locale=<locale>] [--version=<version>] [--force]"},{"name":"install","description":"Create the WordPress tables in the database.","longdesc":"## OPTIONS\n\n--url=<url>\n: The address of the new site.\n\n--title=<site-title>\n: The title of the new site.\n\n--admin_user=<username>\n: The name of the admin user.\n\n--admin_password=<password>\n: The password for the admin user.\n\n--admin_email=<email>\n: The email address for the admin user.","synopsis":"--url=<url> --title=<site-title> --admin_user=<username> --admin_password=<password> --admin_email=<email>"},{"name":"is-installed","description":"Determine if the WordPress tables are installed.","longdesc":"[--network]\n: Check if this is a multisite install\n\n## EXAMPLES\n\n    if ! $(wp core is-installed); then\n        wp core install\n    fi","synopsis":"[--network]"},{"name":"multisite-convert","description":"Transform a single-site install into a multi-site install.","longdesc":"## OPTIONS\n\n[--title=<network-title>]\n: The title of the new network.\n\n[--base=<url-path>]\n: Base path after the domain name that each site url will start with.\nDefault: '\/'\n\n[--subdomains]\n: If passed, the network will use subdomains, instead of subdirectories.","synopsis":"[--title=<network-title>] [--base=<url-path>] [--subdomains]"},{"name":"multisite-install","description":"Install multisite from scratch.","longdesc":"## OPTIONS\n\n[--url=<url>]\n: The address of the new site.\n\n[--base=<url-path>]\n: Base path after the domain name that each site url in the network will start with.\nDefault: '\/'\n\n[--subdomains]\n: If passed, the network will use subdomains, instead of subdirectories.\n\n--title=<site-title>\n: The title of the new site.\n\n--admin_user=<username>\n: The name of the admin user. Default: 'admin'\n\n--admin_password=<password>\n: The password for the admin user.\n\n--admin_email=<email>\n: The email address for the admin user.","synopsis":"[--url=<url>] [--base=<url-path>] [--subdomains] --title=<site-title> --admin_user=<username> --admin_password=<password> --admin_email=<email>"},{"name":"update","description":"Update WordPress.","longdesc":"## OPTIONS\n\n[<zip>]\n: Path to zip file to use, instead of downloading from wordpress.org.\n\n[--version=<version>]\n: Update to this version, instead of to the latest version.\n\n[--force]\n: Update even when installed WP version is greater than the requested version.\n\n[--locale=<locale>]\n: Select which language you want to download.\n\n## EXAMPLES\n\n    wp core update\n\n    wp core update --version=3.8 ..\/latest.zip\n\n    wp core update --version=3.1 --force","synopsis":"[<zip>] [--version=<version>] [--force] [--locale=<locale>]"},{"name":"update-db","description":"Update the WordPress database.","longdesc":"","synopsis":""},{"name":"version","description":"Display the WordPress version.","longdesc":"## OPTIONS\n\n[--extra]\n: Show extended version information.","synopsis":"[--extra]"}]},{"name":"cron","description":"Manage WP-Cron events and schedules.","longdesc":"","subcommands":[{"name":"event","description":"Manage WP-Cron events.","longdesc":"","subcommands":[{"name":"delete","description":"Delete the next scheduled cron event for the given hook.","longdesc":"## OPTIONS\n\n<hook>\n: The hook name","synopsis":"<hook>"},{"name":"list","description":"List scheduled cron events.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Available fields: hook, next_run, next_run_gmt, next_run_relative, recurrence.\n\n[--format=<format>]\n: Accepted values: table, json, csv, ids. Default: table.\n\n## EXAMPLES\n\n    wp cron event list\n\n    wp cron event list --fields=hook,next_run --format=json","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"run","description":"Run the next scheduled cron event for the given hook.","longdesc":"## OPTIONS\n\n<hook>\n: The hook name","synopsis":"<hook>"},{"name":"schedule","description":"Schedule a new cron event.","longdesc":"## OPTIONS\n\n<hook>\n: The hook name\n\n[<next-run>]\n: A Unix timestamp or an English textual datetime description compatible with `strtotime()`. Defaults to now.\n\n[<recurrence>]\n: How often the event should recur. See `wp cron schedule list` for available schedule names. Defaults to no recurrence.\n\n[--<field>=<value>]\n: Associative args for the event.\n\n## EXAMPLES\n\n    wp cron event schedule cron_test\n\n    wp cron event schedule cron_test now hourly\n\n    wp cron event schedule cron_test '+1 hour' --foo=1 --bar=2","synopsis":"<hook> [<next-run>] [<recurrence>] [--<field>=<value>]"}]},{"name":"schedule","description":"Manage WP-Cron schedules.","longdesc":"","subcommands":[{"name":"list","description":"List available cron schedules.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Available fields: name, display, interval.\n\n[--format=<format>]\n: Accepted values: table, json, csv, ids. Default: table.\n\n## EXAMPLES\n\n    wp cron schedule list\n\n    wp cron schedule list --fields=name --format=ids","synopsis":"[--fields=<fields>] [--format=<format>]"}]},{"name":"test","description":"Test the WP Cron spawning system and report back its status.","longdesc":"","synopsis":""}]},{"name":"db","description":"Perform basic database operations.","longdesc":"","subcommands":[{"name":"cli","description":"Open a mysql console using the WordPress credentials.","longdesc":"","synopsis":""},{"name":"create","description":"Create the database, as specified in wp-config.php","longdesc":"","synopsis":""},{"name":"drop","description":"Delete the database.","longdesc":"## OPTIONS\n\n[--yes]\n: Answer yes to the confirmation message.","synopsis":"[--yes]"},{"name":"export","description":"Exports the database to a file or to STDOUT.","longdesc":"## OPTIONS\n\n[<file>]\n: The name of the SQL file to export. If '-', then outputs to STDOUT. If omitted, it will be '{dbname}.sql'.\n\n[--<field>=<value>]\n: Extra arguments to pass to mysqldump\n\n[--tables=<tables>]\n: The comma separated list of specific tables to export. Excluding this parameter will export all tables\n\n## EXAMPLES\n\n    wp db export --add-drop-table\n    wp db export --tables=wp_options,wp_users","synopsis":"[<file>] [--<field>=<value>] [--tables=<tables>]"},{"name":"import","description":"Import database from a file or from STDIN.","longdesc":"## OPTIONS\n\n[<file>]\n: The name of the SQL file to import. If '-', then reads from STDIN. If omitted, it will look for '{dbname}.sql'.","synopsis":"[<file>]"},{"name":"optimize","description":"Optimize the database.","longdesc":"","synopsis":""},{"name":"query","description":"Execute a query against the database.","longdesc":"## OPTIONS\n\n[<sql>]\n: A SQL query. If not passed, will try to read from STDIN.\n\n## EXAMPLES\n\n    # execute a query stored in a file\n    wp db query < debug.sql","synopsis":"[<sql>]"},{"name":"repair","description":"Repair the database.","longdesc":"","synopsis":""},{"name":"reset","description":"Remove all tables from the database.","longdesc":"## OPTIONS\n\n[--yes]\n: Answer yes to the confirmation message.","synopsis":"[--yes]"},{"name":"tables","description":"List the database tables.","longdesc":"## OPTIONS\n\n[--scope=<scope>]\n: Can be all, global, ms_global, blog, or old tables. Defaults to all.\n\n## EXAMPLES\n\n    # Export only tables for a single site\n    wp db export --tables=$(wp db tables --url=sub.example.com | tr '\\n' ',')","synopsis":"[--scope=<scope>]"}]},{"name":"eval","description":"Execute arbitrary PHP code after loading WordPress.","longdesc":"## EXAMPLES\n\n    wp eval 'echo WP_CONTENT_DIR;'","synopsis":"<php-code>"},{"name":"eval-file","description":"Load and execute a PHP file after loading WordPress.","longdesc":"## OPTIONS\n\n<file>\n: The path to the PHP file to execute.\n\n[<arg>...]\n: One or more arguments to pass to the file. They are placed in the $args variable.\n\n## EXAMPLES\n\n    wp eval-file my-code.php value1 value2","synopsis":"<file> [<arg>...]"},{"name":"export","description":"Export content to a WXR file.","longdesc":"## OPTIONS\n\n[--dir=<dirname>]\n: Full path to directory where WXR export files should be stored. Defaults\nto current working directory.\n\n[--skip_comments]\n: Don't export comments.\n\n[--max_file_size=<MB>]\n: A single export file should have this many megabytes.\n\n## FILTERS\n\n[--start_date=<date>]\n: Export only posts published after this date, in format YYYY-MM-DD.\n\n[--end_date=<date>]\n: Export only posts published before this date, in format YYYY-MM-DD.\n\n[--post_type=<post-type>]\n: Export only posts with this post_type. Defaults to all.\n\n[--post__in=<pid>]\n: Export all posts specified as a comma-separated list of IDs.\n\n[--author=<author>]\n: Export only posts by this author. Can be either user login or user ID.\n\n[--category=<name>]\n: Export only posts in this category.\n\n[--post_status=<status>]\n: Export only posts with this status.\n\n## EXAMPLES\n\n    wp export --dir=\/tmp\/ --user=admin --post_type=post --start_date=2011-01-01 --end_date=2011-12-31\n\n    wp export --dir=\/tmp\/ --post__in=123,124,125","synopsis":"[--dir=<dirname>] [--skip_comments] [--max_file_size=<MB>] [--start_date=<date>] [--end_date=<date>] [--post_type=<post-type>] [--post__in=<pid>] [--author=<author>] [--category=<name>] [--post_status=<status>]"},{"name":"help","description":"Get help on a certain command.","longdesc":"## EXAMPLES\n\n    # get help for `core` command\n    wp help core\n\n    # get help for `core download` subcommand\n    wp help core download","synopsis":"[<command>...]"},{"name":"import","description":"Import content from a WXR file.","longdesc":"## OPTIONS\n\n<file>...\n: Path to one or more valid WXR files for importing.\n\n--authors=<authors>\n: How the author mapping should be handled. Options are 'create', 'mapping.csv', or 'skip'. The first will create any non-existent users from the WXR file. The second will read author mapping associations from a CSV, or create a CSV for editing if the file path doesn't exist. The CSV requires two columns, and a header row like \"old_user_login,new_user_login\". The last option will skip any author mapping.\n\n[--skip=<data-type>]\n: Skip importing specific data. Supported options are: 'attachment' and 'image_resize' (skip time-consuming thumbnail generation).","synopsis":"<file>... --authors=<authors> [--skip=<data-type>]"},{"name":"media","description":"Manage attachments.","longdesc":"","subcommands":[{"name":"import","description":"Create attachments from local files or from URLs.","longdesc":"## OPTIONS\n\n<file>...\n: Path to file or files to be imported. Supports the glob(3) capabilities of the current shell.\n    If file is recognized as a URL (for example, with a scheme of http or ftp), the file will be\n    downloaded to a temp file before being sideloaded.\n\n[--post_id=<post_id>]\n: ID of the post to attach the imported files to\n\n[--title=<title>]\n: Attachment title (post title field)\n\n[--caption=<caption>]\n: Caption for attachent (post excerpt field)\n\n[--alt=<alt_text>]\n: Alt text for image (saved as post meta)\n\n[--desc=<description>]\n: \"Description\" field (post content) of attachment post\n\n[--featured_image]\n: If set, set the imported image as the Featured Image of the post its attached to.\n\n[--porcelain]\n: Output just the new attachment id.\n\n## EXAMPLES\n\n    # Import all jpgs in the current user's \"Pictures\" directory, not attached to any post\n    wp media import ~\/Pictures\/**\\\/*.jpg\n\n    # Import a local image and set it to be the post thumbnail for a post\n    wp media import ~\/Downloads\/image.png --post_id=123 --title=\"A downloaded picture\" --featured_image\n\n    # Import an image from the web\n    wp media import http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png --title='The WordPress logo' --alt=\"Semantic personal publishing\"","synopsis":"<file>... [--post_id=<post_id>] [--title=<title>] [--caption=<caption>] [--alt=<alt_text>] [--desc=<description>] [--featured_image] [--porcelain]"},{"name":"regenerate","description":"Regenerate thumbnail(s).","longdesc":"## OPTIONS\n\n[<attachment-id>...]\n: One or more IDs of the attachments to regenerate.\n\n[--yes]\n: Answer yes to the confirmation message.\n\n## EXAMPLES\n\n    # re-generate all thumbnails, without confirmation\n    wp media regenerate --yes\n\n    # re-generate all thumbnails that have IDs between 1000 and 2000\n    seq 1000 2000 | xargs wp media regenerate","synopsis":"[<attachment-id>...] [--yes]"}]},{"name":"menu","description":"List, create, assign, and delete menus","longdesc":"## EXAMPLES\n\n    # Create a new menu\n    wp menu create \"My Menu\"\n\n    # List existing menus\n    wp menu list\n\n    # Create a new menu link item\n    wp menu item add-custom sidebar-menu Apple http:\/\/apple.com --porcelain\n\n    # Assign the 'primary-menu' menu to the 'primary' location\n    wp menu location assign primary-menu primary","subcommands":[{"name":"create","description":"Create a new menu","longdesc":"<menu-name>\n: A descriptive name for the menu\n\n[--porcelain]\n: Output just the new menu id.\n\n## EXAMPLES\n\n    wp menu create \"My Menu\"","synopsis":"<menu-name> [--porcelain]"},{"name":"delete","description":"Delete one or more menus","longdesc":"<menu>...\n: The name, slug, or term ID for the menu(s)\n\n## EXAMPLES\n\n    wp menu delete \"My Menu\"","synopsis":"<menu>..."},{"name":"item","description":"List, add, and delete items associated with a menu","longdesc":"## EXAMPLES\n\n    # Add an existing post to an existing menu\n    wp menu item add-post sidebar-menu 33 --title=\"Custom Test Post\"\n\n    # Create a new menu link item\n    wp menu item add-custom sidebar-menu Apple http:\/\/apple.com --porcelain","subcommands":[{"name":"add-custom","description":"Add a custom menu item","longdesc":"<menu>\n: The name, slug, or term ID for the menu\n\n<title>\n: Title for the link\n\n<link>\n: Target URL for the link\n\n[--description=<description>]\n: Set a custom description for the menu item\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item\n\n[--target=<target>]\n: Set a custom link target for the menu item\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item\n\n[--porcelain]\n: Output just the new menu item id.\n\n## EXAMPLES\n\n    wp menu item add-custom sidebar-menu Apple http:\/\/apple.com --porcelain","synopsis":"<menu> <title> <link> [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"},{"name":"add-post","description":"Add a post as a menu item","longdesc":"<menu>\n: The name, slug, or term ID for the menu\n\n<post-id>\n: Post ID to add to the menu\n\n[--title=<title>]\n: Set a custom title for the menu item\n\n[--link=<link>]\n: Set a custom url for the menu item\n\n[--description=<description>]\n: Set a custom description for the menu item\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item\n\n[--target=<target>]\n: Set a custom link target for the menu item\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item\n\n[--porcelain]\n: Output just the new menu item id.\n\n## EXAMPLES\n\n    wp menu item add-post sidebar-menu 33 --title=\"Custom Test Post\"","synopsis":"<menu> <post-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"},{"name":"add-term","description":"Add a taxonomy term as a menu item","longdesc":"<menu>\n: The name, slug, or term ID for the menu\n\n<taxonomy>\n: Taxonomy of the term to be added\n\n<term-id>\n: Term ID of the term to be added\n\n[--title=<title>]\n: Set a custom title for the menu item\n\n[--link=<link>]\n: Set a custom url for the menu item\n\n[--description=<description>]\n: Set a custom description for the menu item\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item\n\n[--target=<target>]\n: Set a custom link target for the menu item\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item\n\n[--porcelain]\n: Output just the new menu item id.\n\n## EXAMPLES\n\n    wp menu item add-term sidebar-menu post_tag 24","synopsis":"<menu> <taxonomy> <term-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"},{"name":"delete","description":"Delete one or more items from a menu","longdesc":"<db-id>...\n: Database ID for the menu item(s).\n\n## EXAMPLES\n\n    wp menu item remove 45","synopsis":"<db-id>..."},{"name":"list","description":"Get a list of items associated with a menu","longdesc":"## OPTIONS\n\n<menu>\n: The name, slug, or term ID for the menu\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to db_id,type,title,link\n\n[--format=<format>]\n: Accepted values: table, csv, json, count, ids. Default: table\n\n## EXAMPLES\n\n    wp menu item list <menu>","synopsis":"<menu> [--fields=<fields>] [--format=<format>]"},{"name":"update","description":"Update a menu item","longdesc":"<db-id>\n: Database ID for the menu item.\n\n[--title=<title>]\n: Set a custom title for the menu item\n\n[--link=<link>]\n: Set a custom url for the menu item\n\n[--description=<description>]\n: Set a custom description for the menu item\n\n[--attr-title=<attr-title>]\n: Set a custom title attribute for the menu item\n\n[--target=<target>]\n: Set a custom link target for the menu item\n\n[--classes=<classes>]\n: Set a custom link classes for the menu item\n\n[--position=<position>]\n: Specify the position of this menu item.\n\n[--parent-id=<parent-id>]\n: Make this menu item a child of another menu item\n\n## EXAMPLES\n\n    wp menu item update 45 --title=WordPress --link='http:\/\/wordpress.org' --target=_blank --position=2","synopsis":"<db-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>]"}]},{"name":"list","description":"Get a list of menus.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to term_id,name,slug,count\n\n[--format=<format>]\n: Accepted values: table, csv, json, count, ids. Default: table\n\n## EXAMPLES\n\n    wp menu list","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"location","description":"Manage a menu's assignment to locations.","longdesc":"## EXAMPLES\n\n    # List available menu locations\n    wp menu location list\n\n    # Assign the 'primary-menu' menu to the 'primary' location\n    wp menu location assign primary-menu primary\n\n    # Remove the 'primary-menu' menu from the 'primary' location\n    wp menu location remove primary-menu primary","subcommands":[{"name":"assign","description":"Assign a location to a menu","longdesc":"<menu>\n: The name, slug, or term ID for the menu\n\n<location>\n: Location's slug\n\n## EXAMPLES\n\n    wp menu location assign primary-menu primary","synopsis":"<menu> <location>"},{"name":"list","description":"List locations for the current theme.","longdesc":"[--format=<format>]\n: Accepted values: table, csv, json, count, ids. Default: table\n\n## EXAMPLES\n\n    wp menu location list","synopsis":"[--format=<format>]"},{"name":"remove","description":"Remove a location from a menu","longdesc":"<menu>\n: The name, slug, or term ID for the menu\n\n<location>\n: Location's slug\n\n## EXAMPLES\n\n    wp menu location remove primary-menu primary","synopsis":"<menu> <location>"}]}]},{"name":"network","description":"","longdesc":"","subcommands":[{"name":"meta","description":"Manage network custom fields.","longdesc":"## OPTIONS\n\n<id>\n: The network id (usually 1).\n\n--format=json\n: Encode\/decode values as JSON.\n\n## EXAMPLES\n\n    # get a list of super-admins\n    wp network meta get 1 site_admins","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"","synopsis":"<id> <key>"},{"name":"get","description":"Get meta field value.","longdesc":"","synopsis":"<id> <key> [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.","synopsis":"<id> <key> [<value>] [--format=<format>]"}]}]},{"name":"option","description":"Manage options.","longdesc":"## OPTIONS\n\n[--format=json]\n: Encode\/decode values as JSON.\n\n## EXAMPLES\n\n    wp option get siteurl\n\n    wp option add my_option foobar\n\n    wp option update my_option '{\"foo\": \"bar\"}' --format=json\n\n    wp option delete my_option","subcommands":[{"name":"add","description":"Add an option.","longdesc":"## OPTIONS\n\n<key>\n: The name of the option to add.\n\n[<value>]\n: The value of the option to add. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.\n\n[--autoload=<autoload>]\n: Should this option be automatically loaded. Accepted values: yes, no. Default: yes\n\n## EXAMPLES\n\n    # Create an option by reading a JSON file\n    wp option add my_option --format=json < config.json","synopsis":"<key> [<value>] [--format=<format>] [--autoload=<autoload>]"},{"name":"delete","description":"Delete an option.","longdesc":"","synopsis":"<key>"},{"name":"get","description":"Get an option.","longdesc":"","synopsis":"<key> [--format=<format>]"},{"name":"update","description":"Update an option.","longdesc":"## OPTIONS\n\n<key>\n: The name of the option to add.\n\n[<value>]\n: The new value. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.\n\n## EXAMPLES\n\n    # Update an option by reading from a file\n    wp option update my_option < value.txt","synopsis":"<key> [<value>] [--format=<format>]"}]},{"name":"plugin","description":"Manage plugins.","longdesc":"","subcommands":[{"name":"activate","description":"Activate a plugin.","longdesc":"## OPTIONS\n\n<plugin>...\n: One or more plugins to activate.\n\n[--network]\n: If set, the plugin will be activated for the entire multisite network.","synopsis":"<plugin>... [--network]"},{"name":"deactivate","description":"Deactivate a plugin.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to deactivate.\n\n[--all]\n: If set, all plugins will be deactivated.\n\n[--network]\n: If set, the plugin will be deactivated for the entire multisite network.","synopsis":"[<plugin>...] [--all] [--network]"},{"name":"delete","description":"Delete plugin files.","longdesc":"## OPTIONS\n\n<plugin>...\n: One or more plugins to delete.\n\n## EXAMPLES\n\n    wp plugin delete hello","synopsis":"<plugin>..."},{"name":"get","description":"Get a plugin.","longdesc":"## OPTIONS\n\n<plugin>\n: The plugin to get.\n\n[--field=<field>]\n: Instead of returning the whole plugin, returns the value of a single field.\n\n[--format=<format>]\n: Output list as table or JSON. Defaults to table.\n\n## EXAMPLES\n\n    wp plugin get bbpress --format=json","synopsis":"<plugin> [--field=<field>] [--format=<format>]"},{"name":"install","description":"Install a plugin.","longdesc":"## OPTIONS\n\n<plugin|zip|url>...\n: A plugin slug, the path to a local zip file, or URL to a remote zip file.\n\n[--version=<version>]\n: If set, get that particular version from wordpress.org, instead of the\nstable version.\n\n[--force]\n: If set, the command will overwrite any installed version of the plugin, without prompting\nfor confirmation.\n\n[--activate]\n: If set, the plugin will be activated immediately after install.\n\n[--activate-network]\n: If set, the plugin will be network activated immediately after install\n\n## EXAMPLES\n\n    # Install the latest version from wordpress.org and activate\n    wp plugin install bbpress --activate\n\n    # Install the development version from wordpress.org\n    wp plugin install bbpress --version=dev\n\n    # Install from a local zip file\n    wp plugin install ..\/my-plugin.zip\n\n    # Install from a remote zip file\n    wp plugin install http:\/\/s3.amazonaws.com\/bucketname\/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef","synopsis":"<plugin|zip|url>... [--version=<version>] [--force] [--activate] [--activate-network]"},{"name":"is-installed","description":"Check if the plugin is installed.","longdesc":"## OPTIONS\n\n<plugin>\n: The plugin to check.\n\n## EXAMPLES\n\n    wp plugin is-installed hello","synopsis":"<plugin>"},{"name":"list","description":"Get a list of plugins.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: Filter results based on the value of a field.\n\n[--field=<field>]\n: Prints the value of a single field for each plugin.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to name,status,update,version.\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp plugin list --status=active --format=json","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"path","description":"Get the path to a plugin or to the plugin directory.","longdesc":"## OPTIONS\n\n[<plugin>]\n: The plugin to get the path to. If not set, will return the path to the\nplugins directory.\n\n[--dir]\n: If set, get the path to the closest parent directory, instead of the\nplugin file.\n\n## EXAMPLES\n\n    cd $(wp plugin path)","synopsis":"[<plugin>] [--dir]"},{"name":"search","description":"Search the wordpress.org plugin repository.","longdesc":"## OPTIONS\n\n<search>\n: The string to search for.\n\n[--per-page=<per-page>]\n: Optional number of results to display. Defaults to 10.\n\n[--field=<field>]\n: Prints the value of a single field for each plugin.\n\n[--fields=<fields>]\n: Ask for specific fields from the API. Defaults to name,slug,author_profile,rating. Acceptable values:\n\n    **name**: Plugin Name\n    **slug**: Plugin Slug\n    **version**: Current Version Number\n    **author**: Plugin Author\n    **author_profile**: Plugin Author Profile\n    **contributors**: Plugin Contributors\n    **requires**: Plugin Minimum Requirements\n    **tested**: Plugin Tested Up To\n    **compatibility**: Plugin Compatible With\n    **rating**: Plugin Rating\n    **num_ratings**: Number of Plugin Ratings\n    **homepage**: Plugin Author's Homepage\n    **description**: Plugin's Description\n    **short_description**: Plugin's Short Description\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp plugin search dsgnwrks --per-page=20 --format=json\n\n    wp plugin search dsgnwrks --fields=name,version,slug,rating,num_ratings","synopsis":"<search> [--per-page=<per-page>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"status","description":"See the status of one or all plugins.","longdesc":"## OPTIONS\n\n[<plugin>]\n: A particular plugin to show the status for.","synopsis":"[<plugin>]"},{"name":"toggle","description":"Toggle a plugin's activation state.","longdesc":"## OPTIONS\n\n<plugin>...\n: One or more plugins to toggle.\n\n[--network]\n: If set, the plugin will be toggled for the entire multisite network.","synopsis":"<plugin>... [--network]"},{"name":"uninstall","description":"Uninstall a plugin.","longdesc":"## OPTIONS\n\n<plugin>...\n: One or more plugins to uninstall.\n\n[--no-delete]\n: If set, the plugin files will not be deleted. Only the uninstall procedure\nwill be run.\n\n## EXAMPLES\n\n    wp plugin uninstall hello","synopsis":"<plugin>... [--no-delete]"},{"name":"update","description":"Update one or more plugins.","longdesc":"## OPTIONS\n\n[<plugin>...]\n: One or more plugins to update.\n\n[--all]\n: If set, all plugins that have updates will be updated.\n\n[--version=<version>]\n: If set, the plugin will be updated to the latest development version,\nregardless of what version is currently installed.\n\n[--dry-run]\n: Preview which plugins would be updated.\n\n## EXAMPLES\n\n    wp plugin update bbpress --version=dev\n\n    wp plugin update --all","synopsis":"[<plugin>...] [--all] [--version=<version>] [--dry-run]"}]},{"name":"post","description":"Manage posts.","longdesc":"","subcommands":[{"name":"create","description":"Create a post.","longdesc":"## OPTIONS\n\n[<file>]\n: Read post content from <file>. If this value is present, the\n    `--post_content` argument will be ignored.\n\n  Passing `-` as the filename will cause post content to\n  be read from STDIN.\n\n[--<field>=<value>]\n: Associative args for the new post. See wp_insert_post().\n\n[--edit]\n: Immediately open system's editor to write or edit post content.\n\n  If content is read from a file, from STDIN, or from the `--post_content`\n  argument, that text will be loaded into the editor.\n\n[--porcelain]\n: Output just the new post id.\n\n## EXAMPLES\n\n    wp post create --post_type=page --post_status=publish --post_title='A future post' --post-status=future --post_date='2020-12-01 07:00:00'\n\n    wp post create .\/post-content.txt --post_category=201,345 --post_title='Post from file'","synopsis":"[<file>] [--<field>=<value>] [--edit] [--porcelain]"},{"name":"delete","description":"Delete a post by ID.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of posts to delete.\n\n[--force]\n: Skip the trash bin.\n\n## EXAMPLES\n\n    wp post delete 123 --force\n\n    wp post delete $(wp post list --post_type='page' --format=ids)","synopsis":"<id>... [--force]"},{"name":"edit","description":"Launch system editor to edit post content.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the post to edit.\n\n## EXAMPLES\n\n    wp post edit 123","synopsis":"<id>"},{"name":"generate","description":"Generate some posts.","longdesc":"## OPTIONS\n\n[--count=<number>]\n: How many posts to generate. Default: 100\n\n[--post_type=<type>]\n: The type of the generated posts. Default: 'post'\n\n[--post_status=<status>]\n: The status of the generated posts. Default: 'publish'\n\n[--post_author=<login>]\n: The author of the generated posts. Default: none\n\n[--post_date=<yyyy-mm-dd>]\n: The date of the generated posts. Default: current date\n\n[--post_content]\n: If set, the command reads the post_content from STDIN.\n\n[--max_depth=<number>]\n: For hierarchical post types, generate child posts down to a certain depth. Default: 1\n\n## EXAMPLES\n\n    wp post generate --count=10 --post_type=page --post_date=1999-01-04\n    curl http:\/\/loripsum.net\/api\/5 | wp post generate --post_content --count=10","synopsis":"[--count=<number>] [--post_type=<type>] [--post_status=<status>] [--post_author=<login>] [--post_date=<yyyy-mm-dd>] [--post_content] [--max_depth=<number>]"},{"name":"get","description":"Get a post's content by ID.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the post to get.\n\n[--field=<field>]\n: Instead of returning the whole post, returns the value of a single field.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    # save the post content to a file\n    wp post get 12 --field=content > file.txt","synopsis":"<id> [--field=<field>] [--format=<format>]"},{"name":"list","description":"Get a list of posts.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: One or more args to pass to WP_Query.\n\n[--field=<field>]\n: Prints the value of a single field for each post.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to ID,post_title,post_name,post_date,post_status.\n\n[--format=<format>]\n: Accepted values: table, csv, json, count, ids. Default: table\n\n## EXAMPLES\n\n    wp post list --field=ID\n\n    wp post list --post_type=post --posts_per_page=5 --format=json\n\n    wp post list --post_type=page --fields=post_title,post_status\n\n    wp post list --post_type=page,post --format=ids","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"meta","description":"Manage post custom fields.","longdesc":"## OPTIONS\n\n[--format=json]\n: Encode\/decode values as JSON.\n\n## EXAMPLES\n\n    wp post meta set 123 _wp_page_template about.php","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to create.\n\n[<value>]\n: The value of the meta field. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.","synopsis":"<id> <key> [<value>] [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"","synopsis":"<id> <key>"},{"name":"get","description":"Get meta field value.","longdesc":"","synopsis":"<id> <key> [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"## OPTIONS\n\n<id>\n: The ID of the object.\n\n<key>\n: The name of the meta field to update.\n\n[<value>]\n: The new value. If ommited, the value is read from STDIN.\n\n[--format=<format>]\n: The serialization format for the value. Default is plaintext.","synopsis":"<id> <key> [<value>] [--format=<format>]"}]},{"name":"update","description":"Update one or more posts.","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of posts to update.\n\n--<field>=<value>\n: One or more fields to update. See wp_update_post().\n\n## EXAMPLES\n\n    wp post update 123 --post_name=something --post_status=draft","synopsis":"<id>... --<field>=<value>"},{"name":"url","description":"Get post url","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of posts get the URL.\n\n## EXAMPLES\n\n    wp post url 123\n\n    wp post url 123 324","synopsis":"<id>..."}]},{"name":"rewrite","description":"Manage rewrite rules.","longdesc":"","subcommands":[{"name":"flush","description":"Flush rewrite rules.","longdesc":"## DESCRIPTION\n\nResets WordPress' rewrite rules based on registered post types, etc.\n\nTo regenerate a .htaccess file with WP-CLI, you'll need to add the mod_rewrite module\nto your wp-cli.yml or config.yml. For example:\n\napache_modules:\n  - mod_rewrite\n\n## OPTIONS\n\n[--hard]\n: Perform a hard flush - update `.htaccess` rules as well as rewrite rules in database.","synopsis":"[--hard]"},{"name":"list","description":"Print current rewrite rules.","longdesc":"## OPTIONS\n\n[--match=<url>]\n: Show rewrite rules matching a particular URL.\n\n[--source=<source>]\n: Show rewrite rules from a particular source.\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp rewrite list --format=csv","synopsis":"[--match=<url>] [--source=<source>] [--format=<format>]"},{"name":"structure","description":"Update the permalink structure.","longdesc":"## DESCRIPTION\n\nUpdates the post permalink structure.\n\nTo regenerate a .htaccess file with WP-CLI, you'll need to add the mod_rewrite module\nto your wp-cli.yml or config.yml. For example:\n\napache_modules:\n  - mod_rewrite\n\n## OPTIONS\n\n<permastruct>\n: The new permalink structure to apply.\n\n[--category-base=<base>]\n: Set the base for category permalinks, i.e. '\/category\/'.\n\n[--tag-base=<base>]\n: Set the base for tag permalinks, i.e. '\/tag\/'.\n\n[--hard]\n: Perform a hard flush - update `.htaccess` rules as well as rewrite rules in database.\n\n## EXAMPLES\n\n    wp rewrite structure '\/%year%\/%monthnum%\/%postname%'","synopsis":"<permastruct> [--category-base=<base>] [--tag-base=<base>] [--hard]"}]},{"name":"role","description":"Manage user roles.","longdesc":"","subcommands":[{"name":"create","description":"Create a new role.","longdesc":"## OPTIONS\n\n<role-key>\n: The internal name of the role.\n\n<role-name>\n: The publicly visible name of the role.\n\n## EXAMPLES\n\n    wp role create approver Approver\n\n    wp role create productadmin \"Product Administrator\"","synopsis":"<role-key> <role-name>"},{"name":"delete","description":"Delete an existing role.","longdesc":"## OPTIONS\n\n<role-key>\n: The internal name of the role.\n\n## EXAMPLES\n\n    wp role delete approver\n\n    wp role delete productadmin","synopsis":"<role-key>"},{"name":"exists","description":"Check if a role exists.","longdesc":"##DESCRIPTION\n\nWill exit with status 0 if the role exists, 1 if it does not.\n\n## OPTIONS\n\n<role-key>\n: The internal name of the role.\n\n## EXAMPLES\n\n    wp role exists editor","synopsis":"<role-key>"},{"name":"list","description":"List all roles.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to name,role.\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp role list --fields=role --format=csv","synopsis":"[--fields=<fields>] [--format=<format>]"},{"name":"reset","description":"Reset any default role to default capabilities.","longdesc":"## OPTIONS\n\n[<role-key>...]\n: The internal name of one or more roles to reset.\n\n[--all]\n: If set, all default roles will be reset.\n\n## EXAMPLES\n\n    wp role reset administrator author contributor\n\n    wp role reset --all","synopsis":"[<role-key>...] [--all]"}]},{"name":"scaffold","description":"Generate code for post types, taxonomies, etc.","longdesc":"","subcommands":[{"name":"_s","description":"Generate starter code for a theme.","longdesc":"## OPTIONS\n\n<slug>\n: The slug for the new theme, used for prefixing functions.\n\n[--activate]\n: Activate the newly downloaded theme.\n\n[--theme_name=<title>]\n: What to put in the 'Theme Name:' header in style.css\n\n[--author=<full-name>]\n: What to put in the 'Author:' header in style.css\n\n[--author_uri=<uri>]\n: What to put in the 'Author URI:' header in style.css","synopsis":"<slug> [--activate] [--theme_name=<title>] [--author=<full-name>] [--author_uri=<uri>]"},{"name":"child-theme","description":"Generate empty child theme.","longdesc":"## OPTIONS\n\n<slug>\n: The slug for the new child theme.\n\n--parent_theme=<slug>\n: What to put in the 'Template:' header in style.css\n\n[--theme_name=<title>]\n: What to put in the 'Theme Name:' header in style.css\n\n[--author=<full-name>]\n: What to put in the 'Author:' header in style.css\n\n[--author_uri=<uri>]\n: What to put in the 'Author URI:' header in style.css\n\n[--theme_uri=<uri>]\n: What to put in the 'Theme URI:' header in style.css\n\n[--activate]\n: Activate the newly created child theme.","synopsis":"<slug> --parent_theme=<slug> [--theme_name=<title>] [--author=<full-name>] [--author_uri=<uri>] [--theme_uri=<uri>] [--activate]"},{"name":"plugin","description":"Generate starter code for a plugin.","longdesc":"## OPTIONS\n\n<slug>\n: The internal name of the plugin.\n\n[--plugin_name=<title>]\n: What to put in the 'Plugin Name:' header\n\n[--skip-tests]\n: Don't generate files for unit testing.\n\n[--activate]\n: Activate the newly generated plugin.","synopsis":"<slug> [--plugin_name=<title>] [--skip-tests] [--activate]"},{"name":"plugin-tests","description":"Generate files needed for running PHPUnit tests.","longdesc":"## DESCRIPTION\n\nThese are the files that are generated:\n\n* `phpunit.xml` is the configuration file for PHPUnit\n* `.travis.yml` is the configuration file for Travis CI\n* `tests\/bootstrap.php` is the file that makes the current plugin active when running the test suite\n* `tests\/test-sample.php` is a sample file containing the actual tests\n\n## ENVIRONMENT\n\nThe `tests\/bootstrap.php` file looks for the WP_TESTS_DIR environment\nvariable.\n\n## OPTIONS\n\n<plugin>\n: The name of the plugin to generate test files for.\n\n## EXAMPLE\n\n    wp scaffold plugin-tests hello","synopsis":"<plugin>"},{"name":"post-type","description":"Generate PHP code for registering a custom post type.","longdesc":"## OPTIONS\n\n<slug>\n: The internal name of the post type.\n\n[--label=<label>]\n: The text used to translate the update messages\n\n[--textdomain=<textdomain>]\n: The textdomain to use for the labels.\n\n[--theme]\n: Create a file in the active theme directory, instead of sending to\nSTDOUT. Specify a theme with `--theme=<theme>` to have the file placed in that theme.\n\n[--plugin=<plugin>]\n: Create a file in the given plugin's directory, instead of sending to STDOUT.\n\n[--raw]\n: Just generate the `register_post_type()` call and nothing else.","synopsis":"<slug> [--label=<label>] [--textdomain=<textdomain>] [--theme] [--plugin=<plugin>] [--raw]"},{"name":"taxonomy","description":"Generate PHP code for registering a custom taxonomy.","longdesc":"## OPTIONS\n\n<slug>\n: The internal name of the taxonomy.\n\n[--post_types=<post-types>]\n: Post types to register for use with the taxonomy.\n\n[--label=<label>]\n: The text used to translate the update messages.\n\n[--textdomain=<textdomain>]\n: The textdomain to use for the labels.\n\n[--theme]\n: Create a file in the active theme directory, instead of sending to\nSTDOUT. Specify a theme with `--theme=<theme>` to have the file placed in that theme.\n\n[--plugin=<plugin>]\n: Create a file in the given plugin's directory, instead of sending to STDOUT.\n\n[--raw]\n: Just generate the `register_taxonomy()` call and nothing else.\n\n## EXAMPLES\n\n    wp scaffold taxonomy venue --post_types=event,presentation","synopsis":"<slug> [--post_types=<post-types>] [--label=<label>] [--textdomain=<textdomain>] [--theme] [--plugin=<plugin>] [--raw]"}]},{"name":"search-replace","description":"Search\/replace strings in the database.","longdesc":"## DESCRIPTION\n\nThis command will go through all rows in all tables and will replace all\nappearances of the old string with the new one.\n\nIt will correctly handle serialized values, and will not change primary key values.\n\n## OPTIONS\n\n<old>\n: The old string.\n\n<new>\n: The new string.\n\n[<table>...]\n: List of database tables to restrict the replacement to.\n\n[--network]\n: Search\/replace through all the tables in a multisite install.\n\n[--skip-columns=<columns>]\n: Do not perform the replacement in the comma-separated columns.\n\n[--dry-run]\n: Show report, but don't perform the changes.\n\n[--recurse-objects]\n: Enable recursing into objects to replace strings\n\n## EXAMPLES\n\n    wp search-replace 'http:\/\/example.dev' 'http:\/\/example.com' --skip-columns=guid\n\n    wp search-replace 'foo' 'bar' wp_posts wp_postmeta wp_terms --dry-run","synopsis":"<old> <new> [<table>...] [--network] [--skip-columns=<columns>] [--dry-run] [--recurse-objects]"},{"name":"shell","description":"Interactive PHP console.","longdesc":"## DESCRIPTION\n\n`wp shell` allows you to evaluate PHP statements and expressions interactively, from within a WordPress environment. This means that you have access to all the functions, classes and globals that you would have access to from inside a WordPress plugin, for example.\n\n## OPTIONS\n\n[--basic]\n: Start in fail-safe mode, even if Boris is available.","synopsis":"[--basic]"},{"name":"sidebar","description":"Manage sidebars.","longdesc":"","subcommands":[{"name":"list","description":"List registered sidebars.","longdesc":"## OPTIONS\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to name, id, description\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp sidebar list --fields=name,id --format=csv","synopsis":"[--fields=<fields>] [--format=<format>]"}]},{"name":"site","description":"Perform site-wide operations.","longdesc":"","subcommands":[{"name":"create","description":"Create a site in a multisite install.","longdesc":"## OPTIONS\n\n--slug=<slug>\n: Path for the new site. Subdomain on subdomain installs, directory on subdirectory installs.\n\n--title=<title>\n: Title of the new site. Default: prettified slug.\n\n--email=<email>\n: Email for Admin user. User will be created if none exists. Assignement to Super Admin if not included.\n\n--network_id=<network-id>\n: Network to associate new site with. Defaults to current network (typically 1).\n\n--private\n: If set, the new site will be non-public (not indexed)\n\n--porcelain\n: If set, only the site id will be output on success.","synopsis":"--slug=<slug> [--title=<title>] [--email=<email>] [--network_id=<network-id>] [--private] [--porcelain]"},{"name":"delete","description":"Delete a site in a multisite install.","longdesc":"## OPTIONS\n\n[<site-id>]\n: The id of the site to delete. If not provided, you must set the --slug parameter.\n\n[--slug=<slug>]\n: Path of the blog to be deleted. Subdomain on subdomain installs, directory on subdirectory installs.\n\n[--yes]\n: Answer yes to the confirmation message.\n\n[--keep-tables]\n: Delete the blog from the list, but don't drop it's tables.","synopsis":"[<site-id>] [--slug=<slug>] [--yes] [--keep-tables]"},{"name":"empty","description":"Empty a site of its content (posts, comments, and terms).","longdesc":"## OPTIONS\n\n[--yes]\n: Proceed to empty the site without a confirmation prompt.","synopsis":"[--yes]"},{"name":"list","description":"List all sites in a multisite install.","longdesc":"## OPTIONS\n\n[--network=<id>]\n: The network to which the sites belong.\n\n[--field=<field>]\n: Prints the value of a single field for each site.\n\n[--fields=<fields>]\n: Comma-separated list of fields to show.\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    # Output a simple list of site URLs\n    wp site list --field=url","synopsis":"[--network=<id>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"url","description":"Get site url","longdesc":"## OPTIONS\n\n<id>...\n: One or more IDs of sites to get the URL.\n\n## EXAMPLES\n\n    wp site url 123","synopsis":"<id>..."}]},{"name":"super-admin","description":"List, add, and remove super admins from a network.","longdesc":"","subcommands":[{"name":"add","description":"Grant super-admin privileges to one or more users.","longdesc":"<user>...\n: One or more user IDs, user emails, or user logins.","synopsis":"<user>..."},{"name":"list","description":"Show a list of users with super-admin capabilities.","longdesc":"","synopsis":""},{"name":"remove","description":"Revoke super-admin privileges to one or more users.","longdesc":"<user>...\n: One or more user IDs, user emails, or user logins.","synopsis":"<user>..."}]},{"name":"term","description":"Manage terms.","longdesc":"","subcommands":[{"name":"create","description":"Create a term.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy for the new term.\n\n<term>\n: A name for the new term.\n\n[--slug=<slug>]\n: A unique slug for the new term. Defaults to sanitized version of name.\n\n[--description=<description>]\n: A description for the new term.\n\n[--parent=<term-id>]\n: A parent for the new term.\n\n[--porcelain]\n: Output just the new term id.\n\n## EXAMPLES\n\n    wp term create category Apple --description=\"A type of fruit\"","synopsis":"<taxonomy> <term> [--slug=<slug>] [--description=<description>] [--parent=<term-id>] [--porcelain]"},{"name":"delete","description":"Delete a term.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term to delete.\n\n<term-id>...\n: One or more IDs of terms to delete.\n\n## EXAMPLES\n\n    # delete all post tags\n    wp term list post_tag --field=ID | xargs wp term delete post_tag","synopsis":"<taxonomy> <term-id>..."},{"name":"generate","description":"Generate some terms.","longdesc":"## OPTIONS\n\n<taxonomy>\n: The taxonomy for the generated terms.\n\n[--count=<number>]\n: How many terms to generate. Default: 100\n\n[--max_depth=<number>]\n: Generate child terms down to a certain depth. Default: 1\n\n## EXAMPLES\n\n    wp term generate --count=10","synopsis":"<taxonomy> [--count=<number>] [--max_depth=<number>]"},{"name":"get","description":"Get a taxonomy term","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term to get\n\n<term-id>\n: ID of the term to get\n\n[--field=<field>]\n: Instead of returning the whole term, returns the value of a single field.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    wp term get category 1 --format=json","synopsis":"<taxonomy> <term-id> [--field=<field>] [--format=<format>]"},{"name":"list","description":"List terms in a taxonomy.","longdesc":"## OPTIONS\n\n<taxonomy>\n: List terms of a given taxonomy.\n\n[--<field>=<value>]\n: Filter by one or more fields. For accepted fields, see get_terms().\n\n[--field=<field>]\n: Prints the value of a single field for each term.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to all of the term object fields.\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp term list category --format=csv\n\n    wp term list post_tag --fields=name,slug","synopsis":"<taxonomy> [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"update","description":"Update a term.","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term to update.\n\n<term-id>\n: ID for the term to update.\n\n[--name=<name>]\n: A new name for the term.\n\n[--slug=<slug>]\n: A new slug for the term.\n\n[--description=<description>]\n: A new description for the term.\n\n[--parent=<term-id>]\n: A new parent for the term.\n\n## EXAMPLES\n\n    wp term update category 15 --name=Apple","synopsis":"<taxonomy> <term-id> [--name=<name>] [--slug=<slug>] [--description=<description>] [--parent=<term-id>]"},{"name":"url","description":"Get term url","longdesc":"## OPTIONS\n\n<taxonomy>\n: Taxonomy of the term(s) to get.\n\n<term-id>...\n: One or more IDs of terms to get the URL.\n\n## EXAMPLES\n\n    wp term url post_tag 123\n\n    wp term url post_tag 123 324","synopsis":"<taxonomy> <term-id>..."}]},{"name":"theme","description":"Manage themes.","longdesc":"","subcommands":[{"name":"activate","description":"Activate a theme.","longdesc":"## OPTIONS\n\n<theme>\n: The theme to activate.","synopsis":"<theme>"},{"name":"delete","description":"Delete a theme.","longdesc":"## OPTIONS\n\n<theme>...\n: One or more themes to delete.\n\n## EXAMPLES\n\n    wp theme delete twentyeleven","synopsis":"<theme>..."},{"name":"disable","description":"Disable a theme in a multisite install.","longdesc":"## OPTIONS\n\n<theme>\n: The theme to disable.\n\n[--network]\n: If set, the theme is disabled on the network level. Note that\nindividual sites may still have this theme enabled if it was\nenabled for them independently.\n\n## EXAMPLES\n\n    wp theme disable twentythirteen\n\n    wp theme disable twentythirteen --network","synopsis":"<theme> [--network]"},{"name":"enable","description":"Enable a theme in a multisite install.","longdesc":"## OPTIONS\n\n<theme>\n: The theme to enable.\n\n[--network]\n: If set, the theme is enabled for the entire network\n\n[--activate]\n: If set, the theme is activated for the current site. Note that\nthe \"network\" flag has no influence on this.\n\n## EXAMPLES\n\n    wp theme enable twentythirteen\n\n    wp theme enable twentythirteen --network\n\n    wp theme enable twentythirteen --activate","synopsis":"<theme> [--network] [--activate]"},{"name":"get","description":"Get a theme","longdesc":"## OPTIONS\n\n<theme>\n: The theme to get.\n\n[--field=<field>]\n: Instead of returning the whole theme, returns the value of a single field.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    wp theme get twentytwelve --format=json","synopsis":"<theme> [--field=<field>] [--format=<format>]"},{"name":"install","description":"Install a theme.","longdesc":"## OPTIONS\n\n<theme|zip|url>...\n: A theme slug, the path to a local zip file, or URL to a remote zip file.\n\n[--version=<version>]\n: If set, get that particular version from wordpress.org, instead of the\nstable version.\n\n[--force]\n: If set, the command will overwrite any installed version of the theme, without prompting\nfor confirmation.\n\n[--activate]\n: If set, the theme will be activated immediately after install.\n\n## EXAMPLES\n\n    # Install the latest version from wordpress.org and activate\n    wp theme install twentytwelve --activate\n\n    # Install from a local zip file\n    wp theme install ..\/my-theme.zip\n\n    # Install from a remote zip file\n    wp theme install http:\/\/s3.amazonaws.com\/bucketname\/my-theme.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef","synopsis":"<theme|zip|url>... [--version=<version>] [--force] [--activate]"},{"name":"is-installed","description":"Check if the theme is installed.","longdesc":"## OPTIONS\n\n<theme>\n: The theme to check.\n\n## EXAMPLES\n\n    wp theme is-installed twentytwelve","synopsis":"<theme>"},{"name":"list","description":"Get a list of themes.","longdesc":"## OPTIONS\n\n[--<field>=<value>]\n: Filter results based on the value of a field.\n\n[--field=<field>]\n: Prints the value of a single field for each theme.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to name,status,update,version.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    wp theme list --status=inactive --format=csv","synopsis":"[--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"mod","description":"Manage theme mods.","longdesc":"","subcommands":[{"name":"get","description":"Get theme mod(s).","longdesc":"## OPTIONS\n\n[<mod>...]\n: One or more mods to get.\n\n[--all]\n: List all theme mods\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    wp theme mod get --all\n    wp theme mod get background_color --format=json\n    wp theme mod get background_color header_textcolor","synopsis":"[<mod>...] [--all] [--format=<format>]"},{"name":"remove","description":"Remove theme mod(s).","longdesc":"## OPTIONS\n\n[<mod>...]\n: One or more mods to remove.\n\n[--all]\n: Remove all theme mods\n\n## EXAMPLES\n\n    wp theme mod remove --all\n    wp theme mod remove background_color\n    wp theme mod remove background_color header_textcolor","synopsis":"[<mod>...] [--all]"},{"name":"set","description":"Set a theme mod.","longdesc":"## OPTIONS\n\n<mod>\n: The name of the theme mod to set or update.\n\n<value>\n: The new value.\n\n## EXAMPLES\n\n    wp theme mod set background_color 000000","synopsis":"<mod> <value>"}]},{"name":"path","description":"Get the path to a theme or to the theme directory.","longdesc":"## OPTIONS\n\n[<theme>]\n: The theme to get the path to. Path includes \"style.css\" file.\nIf not set, will return the path to the themes directory.\n\n[--dir]\n: If set, get the path to the closest parent directory, instead of the\ntheme's \"style.css\" file.\n\n## EXAMPLES\n\n    cd $(wp theme path)","synopsis":"[<theme>] [--dir]"},{"name":"search","description":"Search the wordpress.org theme repository.","longdesc":"## OPTIONS\n\n<search>\n: The string to search for.\n\n[--per-page=<per-page>]\n: Optional number of results to display. Defaults to 10.\n\n[--field=<field>]\n: Prints the value of a single field for each plugin.\n\n[--fields=<fields>]\n: Ask for specific fields from the API. Defaults to name,slug,author,rating. Acceptable values:\n\n    **name**: Theme Name\n    **slug**: Theme Slug\n    **version**: Current Version Number\n    **author**: Theme Author\n    **preview_url**: Theme Preview URL\n    **screenshot_url**: Theme Screenshot URL\n    **rating**: Theme Rating\n    **num_ratings**: Number of Theme Ratings\n    **homepage**: Theme Author's Homepage\n    **description**: Theme Description\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp theme search automattic --per-page=20\n\n    wp theme search automattic --fields=name,version,slug,rating,num_ratings,description","synopsis":"<search> [--per-page=<per-page>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"status","description":"See the status of one or all themes.","longdesc":"## OPTIONS\n\n[<theme>]\n: A particular theme to show the status for.","synopsis":"[<theme>]"},{"name":"update","description":"Update one or more themes.","longdesc":"## OPTIONS\n\n[<theme>...]\n: One or more themes to update.\n\n[--all]\n: If set, all themes that have updates will be updated.\n\n[--version=<version>]\n: If set, the theme will be updated to the latest development version,\nregardless of what version is currently installed.\n\n[--dry-run]\n: Preview which themes would be updated.\n\n## EXAMPLES\n\n    wp theme update twentyeleven twentytwelve\n\n    wp theme update --all","synopsis":"[<theme>...] [--all] [--version=<version>] [--dry-run]"}]},{"name":"transient","description":"Manage transients.","longdesc":"## EXAMPLES\n\n    wp transient set my_key my_value 300","subcommands":[{"name":"delete","description":"Delete a transient value.","longdesc":"","synopsis":"<key>"},{"name":"delete-all","description":"Delete all transients.","longdesc":"","synopsis":""},{"name":"delete-expired","description":"Delete all expired transients.","longdesc":"","synopsis":""},{"name":"get","description":"Get a transient value.","longdesc":"","synopsis":"<key> [--json]"},{"name":"set","description":"Set a transient value. <expiration> is the time until expiration, in seconds.","longdesc":"","synopsis":"<key> <value> [<expiration>]"},{"name":"type","description":"See whether the transients API is using an object cache or the options table.","longdesc":"","synopsis":""}]},{"name":"user","description":"Manage users.","longdesc":"","subcommands":[{"name":"add-cap","description":"Add a capability for a user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n<cap>\n: The capability to add.\n\n## EXAMPLES\n\n    wp user add-cap john create_premium_item\n    wp user add-cap 15 edit_product","synopsis":"<user> <cap>"},{"name":"add-role","description":"Add a role for a user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n<role>\n: Add the specified role to the user.\n\n## EXAMPLES\n\n    wp user add-role bob author\n    wp user add-role 12 author","synopsis":"<user> <role>"},{"name":"create","description":"Create a user.","longdesc":"## OPTIONS\n\n<user-login>\n: The login of the user to create.\n\n<user-email>\n: The email address of the user to create.\n\n[--role=<role>]\n: The role of the user to create. Default: default role\n\n[--user_pass=<password>]\n: The user password. Default: randomly generated\n\n[--user_registered=<yyyy-mm-dd>]\n: The date the user registered. Default: current date\n\n[--display_name=<name>]\n: The display name.\n\n[--first_name=<first_name>]\n: The user's first name.\n\n[--last_name=<last_name>]\n: The user's last name.\n\n[--send-email]\n: Send an email to the user with their new account details.\n\n[--porcelain]\n: Output just the new user id.\n\n## EXAMPLES\n\n    wp user create bob bob@example.com --role=author","synopsis":"<user-login> <user-email> [--role=<role>] [--user_pass=<password>] [--user_registered=<yyyy-mm-dd>] [--display_name=<name>] [--first_name=<first_name>] [--last_name=<last_name>] [--send-email] [--porcelain]"},{"name":"delete","description":"Delete one or more users from the current site.","longdesc":"## OPTIONS\n\n<user>...\n: The user login, user email, or user ID of the user(s) to update.\n\n[--network]\n: On multisite, delete the user from the entire network.\n\n[--reassign=<user-id>]\n: User ID to reassign the posts to.\n\n[--yes]\n: Answer yes to any confirmation propmts.\n\n## EXAMPLES\n\n    # Delete user 123 and reassign posts to user 567\n    wp user delete 123 --reassign=567","synopsis":"<user>... [--network] [--reassign=<user-id>] [--yes]"},{"name":"generate","description":"Generate users.","longdesc":"## OPTIONS\n\n[--count=<number>]\n: How many users to generate. Default: 100\n\n[--role=<role>]\n: The role of the generated users. Default: default role from WP","synopsis":"[--count=<number>] [--role=<role>]"},{"name":"get","description":"Get a single user.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[--field=<field>]\n: Instead of returning the whole user, returns the value of a single field.\n\n[--fields=<fields>]\n: Get a specific subset of the user's fields.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table\n\n## EXAMPLES\n\n    wp user get 12 --field=login\n\n    wp user get bob --format=json > bob.json","synopsis":"<user> [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"import-csv","description":"Import users from a CSV file.","longdesc":"## OPTIONS\n\n<file>\n: The CSV file of users to import.\n\n[--send-email]\n: Send an email to new users with their account details.\n\n[--skip-update]\n: Don't update users that already exist.\n\n## EXAMPLES\n\n    wp user import-csv \/path\/to\/users.csv\n\n    Sample users.csv file:\n\n    user_login,user_email,display_name,role\n    bobjones,bobjones@domain.com,Bob Jones,contributor\n    newuser1,newuser1@domain.com,New User,author\n    existinguser,existinguser@domain.com,Existing User,administrator","synopsis":"<file> [--send-email] [--skip-update]"},{"name":"list","description":"List users.","longdesc":"## OPTIONS\n\n[--role=<role>]\n: Only display users with a certain role.\n\n[--<field>=<value>]\n: Control output by one or more arguments of get_users().\n\n[--field=<field>]\n: Prints the value of a single field for each user.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to ID,user_login,display_name,user_email,user_registered,roles\n\n[--format=<format>]\n: Accepted values: table, csv, json, count. Default: table\n\n## EXAMPLES\n\n    wp user list --field=ID\n\n    wp user list --role=administrator --format=csv\n\n    wp user list --fields=display_name,user_email --format=json","synopsis":"[--role=<role>] [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"},{"name":"list-caps","description":"List all user's capabilities.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or login.\n\n## EXAMPLES\n\n    wp user list-caps admin\n    wp user list-caps 21","synopsis":"<user>"},{"name":"meta","description":"Manage user custom fields.","longdesc":"## OPTIONS\n\n--format=json\n: Encode\/decode values as JSON.\n\n## EXAMPLES\n\n    wp user meta set 123 description \"Mary is a WordPress developer.\"\n\n    wp user meta update admin first_name \"George\"","subcommands":[{"name":"add","description":"Add a meta field.","longdesc":"<user>\n: The user login, user email, or user ID of the user to add metadata for.\n\n<key>\n: The metadata key.\n\n<value>\n: The new metadata value.","synopsis":"<user> <key> <value> [--format=<format>]"},{"name":"delete","description":"Delete a meta field.","longdesc":"<user>\n: The user login, user email, or user ID of the user to delete metadata from.\n\n<key>\n: The metadata key.","synopsis":"<user> <key>"},{"name":"get","description":"Get meta field value.","longdesc":"## OPTIONS\n\n<user>\n: The user login, user email, or user ID of the user to get metadata for.\n\n<key>\n: The metadata key.\n\n[--format=<format>]\n: Accepted values: table, json. Default: table","synopsis":"<user> <key> [--format=<format>]"},{"name":"update","description":"Update a meta field.","longdesc":"<user>\n: The user login, user email, or user ID of the user to update metadata for.\n\n<key>\n: The metadata key.\n\n<value>\n: The new metadata value.","synopsis":"<user> <key> <value> [--format=<format>]"}]},{"name":"remove-cap","description":"Remove a user's capability.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n<cap>\n: The capability to be removed.\n\n## EXAMPLES\n\n    wp user remove-cap bob edit_themes\n    wp user remove-cap 11 publish_newsletters","synopsis":"<user> <cap>"},{"name":"remove-role","description":"Remove a user's role.","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[<role>]\n: A specific role to remove.\n\n## EXAMPLES\n\n    wp user remove-role bob\n    wp user remove-role 12 editor","synopsis":"<user> [<role>]"},{"name":"set-role","description":"Set the user role (for a particular blog).","longdesc":"## OPTIONS\n\n<user>\n: User ID, user email, or user login.\n\n[<role>]\n: Make the user have the specified role. If not passed, the default role is\nused.\n\n## EXAMPLES\n\n    wp user set-role bob author\n    wp user set-role 12 author","synopsis":"<user> [<role>]"},{"name":"update","description":"Update a user.","longdesc":"## OPTIONS\n\n<user>...\n: The user login, user email or user ID of the user(s) to update.\n\n--<field>=<value>\n: One or more fields to update. For accepted fields, see wp_update_user().\n\n## EXAMPLES\n\n    wp user update 123 --display_name=Mary --user_pass=marypass","synopsis":"<user>... --<field>=<value>"}]},{"name":"widget","description":"Manage sidebar widgets.","longdesc":"## EXAMPLES\n\n    # List widgets on a given sidebar\n    wp widget list sidebar-1\n\n    # Add a calendar widget to the second position on the sidebar\n    wp widget add calendar sidebar-1 2\n\n    # Update option(s) associated with a given widget\n    wp widget update calendar-1 --title=\"Calendar\"\n\n    # Delete one or more widgets entirely\n    wp widget delete calendar-2 archive-1","subcommands":[{"name":"add","description":"Add a widget to a sidebar.","longdesc":"<name>\n: Widget name.\n\n<sidebar-id>\n: ID for the corresponding sidebar.\n\n[<position>]\n: Widget's current position within the sidebar. Defaults to last\n\n[--<field>=<value>]\n: Widget option to add, with its new value\n\n## EXAMPLES\n\n    wp widget add calendar sidebar-1 2 --title=\"Calendar\"","synopsis":"<name> <sidebar-id> [<position>] [--<field>=<value>]"},{"name":"deactivate","description":"Deactivate one or more widgets from an active sidebar.","longdesc":"<widget-id>...\n: Unique ID for the widget(s)\n\n## EXAMPLES\n\n    wp widget deactivate recent-comments-2","synopsis":"<widget-id>..."},{"name":"delete","description":"Delete one or more widgets from a sidebar.","longdesc":"<widget-id>...\n: Unique ID for the widget(s)\n\n## EXAMPLES\n\n    wp widget delete recent-comments-2","synopsis":"<widget-id>..."},{"name":"list","description":"List widgets associated with a sidebar.","longdesc":"<sidebar-id>\n: ID for the corresponding sidebar.\n\n[--fields=<fields>]\n: Limit the output to specific object fields. Defaults to name, id, description\n\n[--format=<format>]\n: Accepted values: table, csv, json, count, ids. Default: table\n\n## EXAMPLES\n\n    wp sidebar widget list <sidebar-id> --fields=name --format=csv","synopsis":"<sidebar-id> [--fields=<fields>] [--format=<format>]"},{"name":"move","description":"Move a widget from one position on a sidebar to another.","longdesc":"<widget-id>\n: Unique ID for the widget\n\n[--position=<position>]\n: Assign the widget to a new position.\n\n[--sidebar-id=<sidebar-id>]\n: Assign the widget to a new sidebar\n\n## EXAMPLES\n\n    wp widget move recent-comments-2 --position=2\n\n    wp widget move recent-comments-2 --sidebar-id=wp_inactive_widgets","synopsis":"<widget-id> [--position=<position>] [--sidebar-id=<sidebar-id>]"},{"name":"update","description":"Update a given widget's options.","longdesc":"<widget-id>\n: Unique ID for the widget\n\n[--<field>=<value>]\n: Field to update, with its new value\n\n## EXAMPLES\n\n    wp widget update calendar-1 --title=\"Calendar\"","synopsis":"<widget-id> [--<field>=<value>]"}]}]}tle=\"Calendar\"","synopsis":"<widget-id> [--<field>=<value>]"}]}]}
